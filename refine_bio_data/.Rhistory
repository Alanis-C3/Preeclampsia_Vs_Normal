scale_y_log10() +
theme_minimal() +
labs(title = "Mean vs Variance of Gene Expression", x = "Mean Expression (log10)", y = "Variance (log10)")
#plotting distribution of CV
ggplot(gene_stats, aes(x = cv)) +
geom_histogram(bins = 50, fill = "blue", alpha = 0.7) +
theme_minimal() +
labs(title = "Distribution of Coefficient of Variation (CV)", x = "CV", y = "Frequency")
# plotting Distribution of variance
p_hist <- ggplot(gene_stats, aes(x = var)) +
geom_histogram(bins = 50, color = "red") +
labs(title = "Distribution of per-gene variance", x = "Variance", y = "Genes") +
theme_minimal()
#PCA plot
pca <- prcomp(Xs, center = FALSE, scale. = FALSE)
knitr::opts_chunk$set(echo = TRUE)
#installing necessary packages / libraries
options(repos = c(CRAN = "https://cloud.r-project.org"))
if (!require(readr, quietly = TRUE))  install.packages("readr")
library(readr)
if (!require(dplyr, quietly = TRUE))  install.packages("dplyr")
library(dplyr)
if (!require(ggplot2, quietly = TRUE)) install.packages("ggplot2")
library(ggplot2)
if (!require(Rtsne, quietly = TRUE))  install.packages("Rtsne")
library(Rtsne)
if (!require(uwot, quietly = TRUE))   install.packages("uwot")
library(uwot)
#reading raw TSV file
tsv_path <- "C:/Users/anae2/Preeclampsia_Vs_Normal/refine_bio_data/GSE60438/GSE60438.tsv"
raw_data <- read_tsv(tsv_path)
gene_ids <- raw_data[[1]]
sample_names <- colnames(raw_data)[-1]
expr_mat <- raw_data %>%
select(-1) %>%                          # drop the Gene column
mutate(across(everything(), as.numeric)) %>%
as.matrix()
rownames(expr_mat) <- gene_ids
colnames(expr_mat) <- sample_names
#reading meta data
meta_path <- "C:/Users/anae2/Preeclampsia_Vs_Normal/refine_bio_data/GSE60438/metadata_GSE60438.tsv"
meta <- read_tsv(meta_path, guess_max = 10000)
meta <- readr::read_tsv(meta_path, show_col_types = FALSE)
# Build pheno with a single, reliable label column
pheno <- meta %>%
dplyr::transmute(
sample = refinebio_accession_code,                # GSM IDs
Group  = dplyr::case_when(
grepl("preeclampsia", `refinebio_disease_stage`, ignore.case = TRUE) ~ "Preeclampsia",
grepl("normotensive|control", `refinebio_disease_stage`, ignore.case = TRUE) ~ "Control",
TRUE ~ NA_character_
)
) %>%
dplyr::filter(!is.na(sample), !is.na(Group)) %>%
dplyr::distinct(sample, .keep_all = TRUE)
# Align expression to metadata order
expr_mat <- expr_mat[, pheno$sample, drop = FALSE]
stopifnot(all(colnames(expr_mat) == pheno$sample))
# Define colors
grp_cols <- c(Control = "lightblue", Preeclampsia = "red")
pheno$Group <- factor(pheno$Group, levels = c("Control", "Preeclampsia"))
#plotting per gene variation in expression
#compute per-gene stats across samples
gene_stats <- data.frame(
gene = rownames(expr_mat),
mean = rowMeans(expr_mat, na.rm = TRUE),
var  = apply(expr_mat, 1, var, na.rm = TRUE)
)
gene_stats$sd <- sqrt(gene_stats$var)
gene_stats$cv <- gene_stats$sd / (abs(gene_stats$mean) + 1e-8)
#plotting mean vs variance
ggplot(gene_stats, aes(x = mean, y = var)) +
geom_point(alpha = 0.5) +
scale_x_log10() +
scale_y_log10() +
theme_minimal() +
labs(title = "Mean vs Variance of Gene Expression", x = "Mean Expression (log10)", y = "Variance (log10)")
#plotting distribution of CV
ggplot(gene_stats, aes(x = cv)) +
geom_histogram(bins = 50, fill = "blue", alpha = 0.7) +
theme_minimal() +
labs(title = "Distribution of Coefficient of Variation (CV)", x = "CV", y = "Frequency")
# plotting Distribution of variance
p_hist <- ggplot(gene_stats, aes(x = var)) +
geom_histogram(bins = 50, color = "red") +
labs(title = "Distribution of per-gene variance", x = "Variance", y = "Genes") +
theme_minimal()
# Create samples x genes matrix with gene-wise z-scoring
Xs <- scale(t(expr_mat), center = TRUE, scale = TRUE)  # rows = samples, cols = genes
# Drop non-informative or non-finite genes
keep <- apply(Xs, 2, function(v) sd(v, na.rm = TRUE) > 0 && all(is.finite(v)))
Xs <- Xs[, keep, drop = FALSE]
#PCA plot
pca <- prcomp(Xs, center = FALSE, scale. = FALSE)
pca_df <- data.frame(sample = pheno$sample, Group = pheno$Group,
PC1 = pca$x[,1], PC2 = pca$x[,2])
ggplot(pca_df, aes(PC1, PC2, color = Group)) +
geom_point(size = 2, alpha = 0.9) +
scale_color_manual(values = grp_cols) +
labs(title = "PCA: Preeclampsia vs Control", color = "Group") +
theme_minimal()
#t-SNE plot
set.seed(42)
perp <- max(5, min(30, floor(nrow(Xs)/3)))
tsne <- Rtsne(Xs, perplexity = perp, check_duplicates = FALSE, verbose = TRUE)
tsne_df <- data.frame(sample = pheno$sample, Group = pheno$Group,
tSNE1 = tsne$Y[,1], tSSE2 = tsne$Y[,2])
ggplot(tsne_df, aes(tSNE1, tSSE2, color = Group)) +
geom_point(size = 2, alpha = 0.9) +
scale_color_manual(values = grp_cols) +
labs(title = paste0("t-SNE (perplexity=", perp, ")"), color = "Group") +
theme_minimal()
#UMAP plot
set.seed(42)
um <- umap(Xs, n_neighbors = min(15, max(2, nrow(Xs) - 1)), metric = "cosine")
umap_df <- data.frame(sample = pheno$sample, Group = pheno$Group,
UMAP1 = um[,1], UMAP2 = um[,2])
ggplot(umap_df, aes(UMAP1, UMAP2, color = Group)) +
geom_point(size = 2, alpha = 0.9) +
scale_color_manual(values = grp_cols) +
labs(title = "UMAP: Preeclampsia vs Control", color = "Group") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
#installing necessary packages / libraries
options(repos = c(CRAN = "https://cloud.r-project.org"))
if (!require(readr, quietly = TRUE))  install.packages("readr")
library(readr)
if (!require(dplyr, quietly = TRUE))  install.packages("dplyr")
library(dplyr)
if (!require(ggplot2, quietly = TRUE)) install.packages("ggplot2")
library(ggplot2)
if (!require(Rtsne, quietly = TRUE))  install.packages("Rtsne")
library(Rtsne)
if (!require(uwot, quietly = TRUE))   install.packages("uwot")
library(uwot)
#reading raw TSV file
tsv_path <- "C:/Users/anae2/Preeclampsia_Vs_Normal/refine_bio_data/GSE60438/GSE60438.tsv"
raw_data <- read_tsv(tsv_path)
gene_ids <- raw_data[[1]]
sample_names <- colnames(raw_data)[-1]
expr_mat <- raw_data %>%
select(-1) %>%                          # drop the Gene column
mutate(across(everything(), as.numeric)) %>%
as.matrix()
rownames(expr_mat) <- gene_ids
colnames(expr_mat) <- sample_names
#reading meta data
meta_path <- "C:/Users/anae2/Preeclampsia_Vs_Normal/refine_bio_data/GSE60438/metadata_GSE60438.tsv"
meta <- readr::read_tsv(meta_path, show_col_types = FALSE)
group_raw <- tolower(paste(
meta$refinebio_disease_stage,
meta$`characteristics_ch1_subject status`,
meta$title,
meta$description,
sep = " | "
))
pheno <- tibble::tibble(
sample = meta$refinebio_accession_code,
Group  = dplyr::case_when(
grepl("preeclamp|pre[- ]eclamp|\\bpe\\b", group_raw) ~ "Preeclampsia",
grepl("normotensive|control", group_raw)              ~ "Control",
TRUE ~ NA_character_
)
) %>%
dplyr::filter(!is.na(sample), !is.na(Group)) %>%
dplyr::distinct(sample, .keep_all = TRUE)
# Align expression to pheno
expr_mat <- expr_mat[, pheno$sample, drop = FALSE]
stopifnot(all(colnames(expr_mat) == pheno$sample))
# Colors and factors used to graphing
grp_cols <- c(Control = "lightblue", Preeclampsia = "red")
pheno$Group <- factor(pheno$Group, levels = c("Control", "Preeclampsia"))
#plotting per gene variation in expression
#compute per-gene stats across samples
gene_stats <- data.frame(
gene = rownames(expr_mat),
mean = rowMeans(expr_mat, na.rm = TRUE),
var  = apply(expr_mat, 1, var, na.rm = TRUE)
)
gene_stats$sd <- sqrt(gene_stats$var)
gene_stats$cv <- gene_stats$sd / (abs(gene_stats$mean) + 1e-8)
#plotting mean vs variance
ggplot(gene_stats, aes(x = mean, y = var)) +
geom_point(alpha = 0.5) +
scale_x_log10() +
scale_y_log10() +
theme_minimal() +
labs(title = "Mean vs Variance of Gene Expression", x = "Mean Expression (log10)", y = "Variance (log10)")
#plotting distribution of CV
ggplot(gene_stats, aes(x = cv)) +
geom_histogram(bins = 50, fill = "blue", alpha = 0.7) +
theme_minimal() +
labs(title = "Distribution of Coefficient of Variation (CV)", x = "CV", y = "Frequency")
# plotting Distribution of variance
p_hist <- ggplot(gene_stats, aes(x = var)) +
geom_histogram(bins = 50, color = "red") +
labs(title = "Distribution of per-gene variance", x = "Variance", y = "Genes") +
theme_minimal()
# Create samples x genes matrix with gene-wise z-scoring
Xs <- scale(t(expr_mat), center = TRUE, scale = TRUE)  # rows = samples, cols = genes
# Drop non-informative or non-finite genes
keep <- apply(Xs, 2, function(v) sd(v, na.rm = TRUE) > 0 && all(is.finite(v)))
Xs <- Xs[, keep, drop = FALSE]
#PCA plot
pca <- prcomp(Xs, center = FALSE, scale. = FALSE)
pca_df <- data.frame(sample = pheno$sample, Group = pheno$Group,
PC1 = pca$x[,1], PC2 = pca$x[,2])
ggplot(pca_df, aes(PC1, PC2, color = Group)) +
geom_point(size = 2, alpha = 0.9) +
scale_color_manual(values = grp_cols) +
labs(title = "PCA: Preeclampsia vs Control", color = "Group") +
theme_minimal()
#t-SNE plot
set.seed(42)
perp <- max(5, min(30, floor(nrow(Xs)/3)))
tsne <- Rtsne(Xs, perplexity = perp, check_duplicates = FALSE, verbose = TRUE)
tsne_df <- data.frame(sample = pheno$sample, Group = pheno$Group,
tSNE1 = tsne$Y[,1], tSSE2 = tsne$Y[,2])
ggplot(tsne_df, aes(tSNE1, tSSE2, color = Group)) +
geom_point(size = 2, alpha = 0.9) +
scale_color_manual(values = grp_cols) +
labs(title = paste0("t-SNE (perplexity=", perp, ")"), color = "Group") +
theme_minimal()
#UMAP plot
set.seed(42)
um <- umap(Xs, n_neighbors = min(15, max(2, nrow(Xs) - 1)), metric = "cosine")
umap_df <- data.frame(sample = pheno$sample, Group = pheno$Group,
UMAP1 = um[,1], UMAP2 = um[,2])
ggplot(umap_df, aes(UMAP1, UMAP2, color = Group)) +
geom_point(size = 2, alpha = 0.9) +
scale_color_manual(values = grp_cols) +
labs(title = "UMAP: Preeclampsia vs Control", color = "Group") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
#installing necessary packages / libraries
options(repos = c(CRAN = "https://cloud.r-project.org"))
if (!require(readr, quietly = TRUE))  install.packages("readr")
library(readr)
if (!require(dplyr, quietly = TRUE))  install.packages("dplyr")
library(dplyr)
if (!require(ggplot2, quietly = TRUE)) install.packages("ggplot2")
library(ggplot2)
if (!require(Rtsne, quietly = TRUE))  install.packages("Rtsne")
library(Rtsne)
if (!require(uwot, quietly = TRUE))   install.packages("uwot")
library(uwot)
#reading raw TSV file
tsv_path <- "C:/Users/anae2/Preeclampsia_Vs_Normal/refine_bio_data/GSE60438/GSE60438.tsv"
raw_data <- read_tsv(tsv_path)
gene_ids <- raw_data[[1]]
sample_names <- colnames(raw_data)[-1]
expr_mat <- raw_data %>%
select(-1) %>%                          # drop the Gene column
mutate(across(everything(), as.numeric)) %>%
as.matrix()
rownames(expr_mat) <- gene_ids
colnames(expr_mat) <- sample_names
#reading meta data
meta_path <- "C:/Users/anae2/Preeclampsia_Vs_Normal/refine_bio_data/GSE60438/metadata_GSE60438.tsv"
meta <- readr::read_tsv(meta_path, show_col_types = FALSE)
group_raw <- tolower(paste(
meta$refinebio_disease_stage,
meta$`characteristics_ch1_subject status`,
meta$title,
meta$description,
sep = " | "
))
pheno <- tibble::tibble(
sample = meta$refinebio_accession_code,
Group  = dplyr::case_when(
grepl("preeclamp|pre[- ]eclamp|\\bpe\\b", group_raw) ~ "Preeclampsia",
grepl("normotensive|control", group_raw)              ~ "Control",
TRUE ~ NA_character_
)
) %>%
dplyr::filter(!is.na(sample), !is.na(Group)) %>%
dplyr::distinct(sample, .keep_all = TRUE)
# Align expression to pheno
expr_mat <- expr_mat[, pheno$sample, drop = FALSE]
stopifnot(all(colnames(expr_mat) == pheno$sample))
# Colors and factors used to graphing
grp_cols <- c(Control = "lightblue", Preeclampsia = "red")
pheno$Group <- factor(pheno$Group, levels = c("Control", "Preeclampsia"))
#calcuate mean per group
calc_stats <- function(g) {
idx <- which(pheno$Group == g)
X   <- expr_mat[, pheno$sample[idx], drop = FALSE]          # genes x samples (that group)
data.frame(
gene = rownames(expr_mat),
Group = g,
mean = rowMeans(X, na.rm = TRUE),
var  = if (length(idx) > 1) apply(X, 1, var, na.rm = TRUE) else NA_real_
)
}
groups <- levels(pheno$Group)
gene_stats_by_group <- do.call(rbind, lapply(groups, calc_stats))
gene_stats_by_group$sd <- sqrt(gene_stats_by_group$var)
gene_stats_by_group$cv <- gene_stats_by_group$sd / (abs(gene_stats_by_group$mean) + 1e-8)
# Mean–variance scatter plot
geom_point(alpha = 0.5, size = 0.8) +
scale_x_log10() + scale_y_log10() +
scale_color_manual(values = grp_cols, drop = FALSE) +
labs(title = "Per-gene mean–variance by group",
x = "Mean expression (log10)", y = "Variance (log10)", color = "Group") +
theme_minimal() +
facet_wrap(~ Group, nrow = 1)
knitr::opts_chunk$set(echo = TRUE)
# Install/load Bioconductor annotation
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
if (!require(AnnotationDbi, quietly = TRUE)) BiocManager::install("AnnotationDbi")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
#installing libraries/packages
options(repos = c(CRAN = "https://cloud.r-project.org"))
if (requireNamespace("BiocManager", quietly = TRUE)) {
options(repos = BiocManager::repositories())
}
library(readr); library(dplyr); library(ggplot2)
library(Rtsne); library(uwot); library(pheatmap); library(gprofiler2)
library(limma)
#loading data and meta data
#reading raw TSV file
tsv_path <- "C:/Users/anae2/Preeclampsia_Vs_Normal/refine_bio_data/GSE60438/GSE60438.tsv"
raw_data <- read_tsv(tsv_path)
gene_ids <- raw_data[[1]]
sample_names <- colnames(raw_data)[-1]
expr_mat <- raw_data %>%
select(-1) %>%                          # drop the Gene column
mutate(across(everything(), as.numeric)) %>%
as.matrix()
rownames(expr_mat) <- gene_ids
colnames(expr_mat) <- sample_names
#reading meta data
meta_path <- "C:/Users/anae2/Preeclampsia_Vs_Normal/refine_bio_data/GSE60438/metadata_GSE60438.tsv"
meta <- readr::read_tsv(meta_path, show_col_types = FALSE)
group_raw <- tolower(paste(
meta$refinebio_disease_stage,
meta$`characteristics_ch1_subject status`,
meta$title,
meta$description,
sep = " | "
))
pheno <- tibble::tibble(
sample = meta$refinebio_accession_code,
Group  = dplyr::case_when(
grepl("preeclamp|pre[- ]eclamp|\\bpe\\b", group_raw) ~ "Preeclampsia",
grepl("normotensive|control", group_raw)              ~ "Control",
TRUE ~ NA_character_
)
) %>%
dplyr::filter(!is.na(sample), !is.na(Group)) %>%
dplyr::distinct(sample, .keep_all = TRUE)
# Align expression to pheno
expr_mat <- expr_mat[, pheno$sample, drop = FALSE]
stopifnot(all(colnames(expr_mat) == pheno$sample))
# Colors and factors used to graphing
grp_cols <- c(Control = "lightblue", Preeclampsia = "pink")
pheno$Group <- factor(pheno$Group, levels = c("Control", "Preeclampsia"))
# Map Ensembl IDs -> HGNC symbols (returns a named character vector)
ens_to_hgnc <- function(ids, organism = "hsapiens", fix_prefix = TRUE, fallback_to_id = TRUE) {
if (!requireNamespace("gprofiler2", quietly = TRUE)) {
stop("Please install gprofiler2: install.packages('gprofiler2')")
}
ids <- as.character(ids)
ids_guess <- if (fix_prefix) sub("^ISG", "ENSG", ids) else ids
core <- sub("\\.\\d+$", "", ids_guess)  # strip version suffix
mp <- gprofiler2::gconvert(core, organism = organism, target = "SYMBOL", filter_na = FALSE)
lut <- setNames(mp$name, mp$input)      # lookup: Ensembl core -> SYMBOL
syms <- unname(lut[core])
# Fallback where no symbol is found
missing <- is.na(syms) | syms == ""
if (fallback_to_id) syms[missing] <- ids[missing]
# Name by original IDs; attach mapping rate
names(syms) <- ids
attr(syms, "mapping_rate") <- mean(!missing)
syms
}
#create symbols to have look up for ens IDs when plotting
symbols <- ens_to_hgnc(rownames(expr_mat))
gene_lookup <- symbols  # named by original IDs
# Example row labels for plots:
rowlabs <- unname(gene_lookup[rownames(expr_mat)])
#plots
#density plots with color per group
# Map rownames (ENSEMBL IDs) to HGNC symbols and update expr_mat rownames
vars      <- apply(expr_mat, 1, var, na.rm = TRUE)
top_ids   <- names(sort(vars, decreasing = TRUE))[1:min(6, nrow(expr_mat))]
top_names <- unname(gene_lookup[top_ids])
df_long <- as.data.frame(t(expr_mat[top_ids, , drop = FALSE]))
df_long$sample <- rownames(df_long)
df_long <- df_long %>%
left_join(pheno, by = "sample") %>%
pivot_longer(cols = all_of(top_ids), names_to = "ID", values_to = "Expr") %>%
mutate(Gene = factor(gene_lookup[ID], levels = unique(top_names)))
#density plots with color per group
# Map rownames (ENSEMBL IDs) to HGNC symbols and update expr_mat rownames
vars      <- apply(expr_mat, 1, var, na.rm = TRUE)
top_ids   <- names(sort(vars, decreasing = TRUE))[1:min(6, nrow(expr_mat))]
top_names <- unname(gene_lookup[top_ids])
df_long <- as.data.frame(t(expr_mat[top_ids, , drop = FALSE]))
df_long$sample <- rownames(df_long)
df_long <- dplyr::left_join(df_long, pheno, by = "sample") %>%
tidyr::pivot_longer(
cols = dplyr::all_of(top_ids),   # gather the gene columns
names_to = "ID",
values_to = "Expr"
) %>%
dplyr::mutate(Gene = factor(gene_lookup[ID], levels = unique(top_names)))
ggplot(df_long, aes(x = Expr, color = Group, fill = Group)) +
geom_density(alpha = 0.25, linewidth = 0.8) +
facet_wrap(~ Gene, scales = "free") +
scale_color_manual(values = grp_cols, drop = FALSE) +
scale_fill_manual(values = grp_cols, drop = FALSE) +
labs(title = "Density of expression by gene and group",
x = "Expression", y = "Density", color = "Group", fill = "Group") +
theme_minimal()
#a helper to plot any single gene by symbol
plot_gene_density <- function(name_or_id) {
if (name_or_id %in% rownames(expr_mat)) {
ids <- name_or_id
label <- gene_lookup[ids]
} else {
ids <- names(gene_lookup)[gene_lookup == name_or_id]
if (length(ids) == 0) stop("Gene not found in gene_lookup: ", name_or_id)
label <- name_or_id
}
expr <- if (length(ids) == 1) as.numeric(expr_mat[ids, ])
else as.numeric(colMeans(expr_mat[ids, , drop = FALSE], na.rm = TRUE))
d <- data.frame(Expr = expr, sample = colnames(expr_mat)) %>%
left_join(pheno, by = "sample")
ggplot(d, aes(x = Expr, color = Group, fill = Group)) +
geom_density(alpha = 0.25, linewidth = 0.8) +
scale_color_manual(values = grp_cols, drop = FALSE) +
scale_fill_manual(values = grp_cols, drop = FALSE) +
labs(title = paste("Expression density:", label),
x = "Expression", y = "Density", color = "Group", fill = "Group") +
theme_minimal()
}
#loading data and meta data
#reading raw TSV file
tsv_path <- "C:/Users/anae2/Preeclampsia_Vs_Normal/refine_bio_data/GSE60438/GSE60438.tsv"
raw_data <- read_tsv(tsv_path)
gene_ids <- raw_data[[1]]
sample_names <- colnames(raw_data)[-1]
expr_mat <- raw_data %>%
select(-1) %>%                          # drop the Gene column
mutate(across(everything(), as.numeric)) %>%
as.matrix()
rownames(expr_mat) <- gene_ids
colnames(expr_mat) <- sample_names
#reading meta data
meta_path <- "C:/Users/anae2/Preeclampsia_Vs_Normal/refine_bio_data/GSE60438/metadata_GSE60438.tsv"
meta <- readr::read_tsv(meta_path, show_col_types = FALSE)
group_raw <- tolower(paste(
meta$refinebio_disease_stage,
meta$`characteristics_ch1_subject status`,
meta$title,
meta$description,
sep = " | "
))
pheno <- tibble::tibble(
sample = meta$refinebio_accession_code,
Group  = dplyr::case_when(
grepl("preeclamp|pre[- ]eclamp|\\bpe\\b", group_raw) ~ "Preeclampsia",
grepl("normotensive|control", group_raw)              ~ "Control",
TRUE ~ NA_character_
)
) %>%
dplyr::filter(!is.na(sample), !is.na(Group)) %>%
dplyr::distinct(sample, .keep_all = TRUE)
# Align expression to pheno
expr_mat <- expr_mat[, pheno$sample, drop = FALSE]
stopifnot(all(colnames(expr_mat) == pheno$sample))
# Colors and factors used to graphing
grp_cols <- c(Control = "lightblue", Preeclampsia = "pink")
pheno$Group <- factor(pheno$Group, levels = c("Control", "Preeclampsia"))
# Map Ensembl IDs -> HGNC symbols (returns a named character vector)
ens_to_hgnc <- function(ids, organism = "hsapiens", fix_prefix = TRUE, fallback_to_id = TRUE) {
if (!requireNamespace("gprofiler2", quietly = TRUE)) {
stop("Please install gprofiler2: install.packages('gprofiler2')")
}
ids <- as.character(ids)
ids_guess <- if (fix_prefix) sub("^ISG", "ENSG", ids) else ids
core <- sub("\\.\\d+$", "", ids_guess)  # strip version suffix
mp <- gprofiler2::gconvert(core, organism = organism, target = "SYMBOL", filter_na = FALSE)
lut <- setNames(mp$name, mp$input)      # lookup: Ensembl core -> SYMBOL
syms <- unname(lut[core])
# Fallback where no symbol is found
missing <- is.na(syms) | syms == ""
if (fallback_to_id) syms[missing] <- ids[missing]
# Name by original IDs; attach mapping rate
names(syms) <- ids
attr(syms, "mapping_rate") <- mean(!missing)
syms
}
#create symbols to have look up for ens IDs when plotting
symbols <- ens_to_hgnc(rownames(expr_mat))
gene_lookup <- symbols  # named by original IDs
# Example row labels for plots:
rowlabs <- unname(gene_lookup[rownames(expr_mat)])
mr <- attr(symbols, "mapping_rate")
cat(sprintf("HGNC mapping rate: %.1f%%\n", 100*mr))
unmapped <- names(symbols)[symbols == names(symbols)]
head(unmapped)
#plots
#installing libraries/packages
options(repos = c(CRAN = "https://cloud.r-project.org"))
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
if (!requireNamespace("org.Hs.eg.db", quietly = TRUE)) {
BiocManager::install("org.Hs.eg.db")
}
